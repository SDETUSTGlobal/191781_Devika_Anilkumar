[8/21, 3:43 PM] Devika Anilkumar: class Department {
    private int id;
    private String deptname;
    private String hod_name;
    
    // Constructor
    public Department(int id, String deptname, String hod_name) {
        this.id = id;
        this.deptname = deptname;
        this.hod_name = hod_name;
    }

    // Getter and Setter methods
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getDeptname() {
        return deptname;
    }

    public void setDeptname(String deptname) {
        this.deptname = deptname;
    }

    public String getHod_name() {
        return hod_name;
    }

    public void setHod_name(String hod_name) {
        this.hod_name = hod_name;
    }
    
    @Override
    public String toString() {
        return "Department ID: " + id + ", Name: " + deptname + ", HOD: " + hod_name;
    }
}

class University {
    private String name;
    private String address;
    private Department[] depts;
    
    // Constructor
    public University(String name, String address, Department[] depts) {
        this.name = name;
        this.address = address;
        this.depts = depts;
    }

    // Getter and Setter methods
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public Department[] getDepts() {
        return depts;
    }

    public void setDepts(Department[] depts) {
        this.depts = depts;
    }
    
    @Override
    public String toString() {
        String result = "University Name: " + name + ", Address: " + address + "\nDepartments:\n";
        for (Department dept : depts) {
            result += dept.toString() + "\n";
        }
        return result;
    }
}

public class CompositionEg {
    public static void main(String[] args) {
        // Create at least two departments
        Department dept1 = new Department(1, "Computer Science", "Dr. Smith");
        Department dept2 = new Department(2, "Mathematics", "Dr. Johnson");
        
        // Set those 2 departments to University object
        Department[] departments = {dept1, dept2};
        University university = new University("Tech University", "123 Tech Road", departments);
        
        // Display university object
        System.out.println(university);
    }
}
[8/21, 4:14 PM] Devika Anilkumar: // Base class
class Vehicle {
    private String model;
    
    public Vehicle(String model) {
        this.model = model;
    }
    
    public String getModel() {
        return model;
    }
    
    public void display() {
        System.out.println("Vehicle model: " + model);
    }
}

// Derived class 1
class Car extends Vehicle {
    private int doors;
    
    public Car(String model, int doors) {
        super(model);
        this.doors = doors;
    }
    
    @Override
    public void display() {
        System.out.println("Car model: " + getModel() + ", Doors: " + doors);
    }
}

// Derived class 2
class Motorcycle extends Vehicle {
    private boolean hasSidecar;
    
    public Motorcycle(String model, boolean hasSidecar) {
        super(model);
        this.hasSidecar = hasSidecar;
    }
    
    @Override
    public void display() {
        System.out.println("Motorcycle model: " + getModel() + ", Has sidecar: " + hasSidecar);
    }
}

public class VehicleTest {
    public static void main(String[] args) {
        // Array of Vehicle with objects of derived classes
        Vehicle[] vehicles = {
            new Car("Toyota Camry", 4),
            new Motorcycle("Harley Davidson", true),
            new Car("Honda Civic", 2)
        };
        
        // Display details of each vehicle
        for (Vehicle vehicle : vehicles) {
            vehicle.display();
        }
    }
}
